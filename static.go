// Code generated by "esc -o static.go -pkg main static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/desktop/desktop.css": {
		local:   "static/desktop/desktop.css",
		size:    168,
		modtime: 1540597009,
		compressed: `
H4sIAAAAAAAC/3zNsQrCMBCH8f2e4j9auJQmJii+TZKGUKw5OSMO0nd3kK5dvu3HN1YxXePSvgQAKeZ7
VXm32WRZRW/Qmk4uBIa9TIyzH2gjGl89ajdJy2dp9Yhaf2U4ZxkuhL/N8niupZf5cOknxp6Btl8AAAD/
/6g2LrWoAAAA
`,
	},

	"/static/desktop/desktop.html": {
		local:   "static/desktop/desktop.html",
		size:    1164,
		modtime: 1540597009,
		compressed: `
H4sIAAAAAAAC/6xUT2/bPgy991Pop3MTIT/skA2ygSHbuT30sqMiMREb/ZtIu823H2wnTdZ5ATYsB8V8
fOLzIwnr/748bJ6+PX4VnmNo7/T5D4xr74QQQkdgI6w3lYAb2fFusZbXqWQiNLJHeCm5shQ2J4bEjXxB
x75x0KOFxRjcC0zIaMKCrAnQrO5FNK8Yu3gBOoI6RmYboEn5pHU5dMB0EBVCI4mPAcgDsBS+wq6RnrnQ
J6W6VA77pc1RUQHLFZaWSDkkfgMipgE8e/k3VRfwWv6msnVpGQ1DRRMcEO4T2pxo1Pp/uV5+/KAGqTnK
H6g5oAPnck0nW7GwoGrnbD5/76AeJ4fT8yj3TLLVaro6U+cs8zNNq2mp9Da74+mWX7WbvNsB+VzEUzWY
xEN1UEkrvzpxeFgEYYMhauQUjOfC5x7qycf5p/myuddofQ+N1HaSTF3cQtWK/Tzrc63YmyAYI/yetTG1
otnfYDyiPXRF8LHcII3+hQM2GOjGO1nGnObyWr13O7B+6YrmYQ4C3ampcq5pmp2wOVAxqZFr2WqH/XkU
IRuHaT+M2GHfasWundW+zPsNGgSHjZhSWo1fnR8BAAD//08sp8mMBAAA
`,
	},

	"/static/desktop/desktop.js": {
		local:   "static/desktop/desktop.js",
		size:    2801,
		modtime: 1540618792,
		compressed: `
H4sIAAAAAAAC/6RVW1PbOBR+Xv+Ks1qmshvjODR0uwlhhoVuh85eGEJnHyjDCPs4cXEkV1ICmYz/+45k
h8SJgXS2Lw3SOd/F5yLHcfZciEU0nSDX4AUSWTx3kymPdCq468HCAQDIBIuvmLpXrte3Bwr1OdcoZyzb
jm7MKHw4DMPQ6zuF13ccx2m3YThXGieg0OY7Mybh5OL8y+WfMABKnSUwjFB/Hv7zt4s8zkXKtR8zzXxz
7S2cn0zaNyX4rYQBmLhAaZnyUZrMXRNYCYgEVyLDIBMjl1yfffz9y6feZyX4ycX5DVzi9ykq3YOv8isn
0KoAy9R2G9LkiRwGA6DaWKMeSNRTycFIcRfEnpLe9YJoyVJOeuTXQ+KTiEmZshGSHjkgPlGaGVfmthuG
YXjQCYlPJObI9K2QMUrSS1im0CcxZukM5fzpoLq+XpBIJAnirZ7nBvejyiUqJYhP+HRyZ2I6xY1PDPOM
Zbc6nSDpdQ674eFvnU63W/g/pvFd+OF1jVpOX5B4haymzv9fHrrdgx/1sNN3ftlDg8SDbSOnLM+nUcr5
blY+hJ3ipqi6dC/IhdJuOQYt2qatp6avWvJpxIJYcFxNn0SVe6sBfLXlT7h6QLnqeJvfr+VrOYc6ovln
dCwnLWdSoduQWkDEdDR2UUohvQaUdW1Arp9kXRhE+IOlGcYrcRYGNjhegrnEKMUZxqDxUddNNsFUnhaW
p0dLEYkVQYu6sdpfdvBN8hpmsVYiA7EqEXz7/jiWvtU01ExPlb90Bs9Xrm7L7qnXv4/pp8JZrdC1fVwy
ma2p2V2GMIA9l/5if9MKYblwqz3nLwr/uT6zecFYTzKX0jUBewGyaGyjA4uyQrj3zcFGr1o9shRzpOUx
3erFgOU58ti1AfEx9QLzHV2DFdg94JmHZRMz1jAAjg9wxjSWwetT+LZTPko7UcU60OIqneDQPjCuF6jp
ndLSDf1Db4v9ZcXLZdUsutpH5h0cYpZAnkb3+9Oc1iLTpIRaRnu1vLPlby1gSUZ3NbpEbBJnl6N9oeto
VcWtJBuzXvGZt70CSqDWAGZBuSVbFB6BtmbB2j5tUTi6k8cbXMUOJbM9aTkabbByMAZA/mWpJts1SJME
BrDVMft/MT0OkkwI6ZqeCrh4cD1oQ0MnbVQI3rwpYY8G0Anfvnsfhh4sVkI+CVMsPUYo37W+9RXHpxlT
yqUjsW/PqVdssvz8LM3b93WOoWZSw53Eh5SPSB/qFMrc7le3DTwlLNQhT8Ukz1BjXMFJnIgZNiPWL9cd
7daZJev2rNktVKVoubEIl/87xX8BAAD//3UAE2zxCgAA
`,
	},

	"/static/mobile/app.css": {
		local:   "static/mobile/app.css",
		size:    243,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/0SOwY6DIBCG7zwFidmbEnf3VHwalEEmUYbApGqavntTqPb48eX7GZWnBBBa5dHCQ0gp
pcUcF3PoQAEG8RSiWU2sygPOnvV/38e9KDVy6LYr3dCy17f+Zyi4mjRj6Jii/juLZvJEGbqJnANoT7Sw
4B3SUXeisRbD/K2UI2JIH0sZGSlohzvY+tVIzLTq3xK8HxZwrC9K5e669goAAP//4Kit/PMAAAA=
`,
	},

	"/static/mobile/app.html": {
		local:   "static/mobile/app.html",
		size:    5003,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/8RYW3fbuBF+96/A4tWhGGfttd0j8VQrJ812d+NL1HrtlxwQGImQQAAGhrr01/eQIBVJ
Fi3ZzTl9IgDN9fsGw6G6P11dD4YPNx9JhrlKjrrNA5hIjgghpJsDMsIz5jxgjxY4ii7o+k+a5dCjMwlz
axxSwo1G0Nijcykw6wmYSQ5RtXlHpJYomYo8Zwp6J+9IzhYyL/LvB4UHV+1YqqCnTe0rOFRST4kD1aMe
lwp8BoCUZA5GPZohWv+3OC60nY473OSxAjZSgH8/6fzcOY2F9Ngcdbj3tDIpNcLYSVz2qM/Y2cmHyBa/
WnH3/vzy4vpxNhymN6f9i98WsTrun4rPV1fvr/7x9HD/y93t8eVkMb37xBVbLG7T+Os/+/ePo/v+tFjC
7b+WeH1+fP7l9PZ3d5UdC9fv9YI/7oz3xsmx1D1K4+QteXkLHB2USYSsmoNc6iqzH2o1goV9i2UudCdn
CE4yJcDLsZbcaF/5+tC56FyexqWrXSKv8MasXRf13EmLxDu+K8XJUwFuGbIL68rVxNOkGwfVF+xwoSe+
w5UpxEixEimTx2zCFrGSqW8MPjluBMQnnfebJ6/xdFAJT1orWP/5Z363HP7b/PHwNLm5zFwK4vLr8af/
TB4/35+NH06G94PP/TM+nf/1+CsTGgdf/MX041P/Xrj08vrcLdIB65+q34e/3U+u/npcjNQ1b6ngl9Ip
udnMuBuHxtJNjVjWGkLOiBQ96rkD0N9yZinhinnfHNXcbgojQ2n0Nw8KOBq3UuFGFbn2hBsVGQ1KaljT
X9nYkK6EP2yJVaJpgWh0I52iJinqqKxHWoVhHcyiOhaadGUjmQtJciEjnsHMGR0pGGF18PMvdlECIpNu
HIxvBRcLOTso3guCsMCIg0ZwdB2USOqR2ZXNmqEGP5SooAyodEsOVMlXGm+MfRfWB+Gty5QPwNvJcfYm
wLe3Tb2VVbmd89GuLJ+RYpwAFwXXvoWVpCVx62TO3DKAMK4ecymArNtc98LNaARAk+tyRwbVbpX2Dnp+
tP+RMaLx/skY0ea73j6HmWfGeGjyaMLJSp/rwD7P4sXKHRmXR2NnChuslLexrQIVS0FtKFYnNBlUoZGl
KRzhNbLVTy2GVilVspGSHmkrB1t4HMLNGh+BAibEqgCOSV8IwrTBDL6Hu0nGHshMBfTrCiMEMjaRACVn
ZUFWoNHkCyzwrcVQ21pulMNrS6CMMFTAahWlyvC6rzTx4tICJYIhq5Y9mi89qFFLsbS0rMaYlXzadIHm
rLF3I/mUhM3uvvQ/+KifNLkKi3YHTds/9Pbk2N66n18cP5fIs5ewk9oWSALSPAM+Tc0i5OLAAkNKZkwV
sNq+ZGrDdTlGhq5PBg4YAnHAC+dAI7EMEZzenUXbld6s2UPuzmbDeuM9qkAxBdLkxhkOIMhcYkaa4z1X
avt2He0cuJRhQurxnqHr+ettVzV0vWWrJBvD5fxnmd4b3nZgli1z0Nge2HZwkFtc7vu9ro2j9gpaDRMO
hMSIMyeq/elFM0rsHXvspstqyiLZGU1uQk7ElnR6L/W40+l0Y/uyvi/SelC7UcA8kDmTSOYZaFKCpAHJ
XCpFUiDc5FYBgthhdQ2KmhtSP8viC3QeNtft5c4XvMzv/8dd9cr7YbR9Den89AqmHspBoRqLSMY8SaEk
SzEO4h2xgUWfmTnBTHoS4CEMCWZQv6/Lny0xjqCpTwsny27+LISE7Oa65CN8fO7jtV6utBByqxiC3/XS
7YaPLrLZ7Kszuj7ylH09aiyt9xNjy/m96e0fvXXgvaFJs+rGQaJVZcCsLbjU2tAkrLnU+9X+KDs/TarH
AT4qEriDnJVevu/2qg6B0WQIW4LdOGBUfgUHtOPwFdyNqz/d/hsAAP//Tph8XIsTAAA=
`,
	},

	"/static/mobile/app.js": {
		local:   "static/mobile/app.js",
		size:    7048,
		modtime: 1540617978,
		compressed: `
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
zdGIGwAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/desktop": {
		isDir: true,
		local: "static/desktop",
	},

	"/static/mobile": {
		isDir: true,
		local: "static/mobile",
	},
}
