// Code generated by "esc -o static.go -pkg main static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/mobile/app.css": {
		local:   "static/mobile/app.css",
		size:    243,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/0SOwY6DIBCG7zwFidmbEnf3VHwalEEmUYbApGqavntTqPb48eX7GZWnBBBa5dHCQ0gp
pcUcF3PoQAEG8RSiWU2sygPOnvV/38e9KDVy6LYr3dCy17f+Zyi4mjRj6Jii/juLZvJEGbqJnANoT7Sw
4B3SUXeisRbD/K2UI2JIH0sZGSlohzvY+tVIzLTq3xK8HxZwrC9K5e669goAAP//4Kit/PMAAAA=
`,
	},

	"/static/mobile/app.html": {
		local:   "static/mobile/app.html",
		size:    5003,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/8RYW3fbuBF+96/A4tWhGGfttd0j8VQrJ812d+NL1HrtlxwQGImQQAAGhrr01/eQIBVJ
Fi3ZzTl9IgDN9fsGw6G6P11dD4YPNx9JhrlKjrrNA5hIjgghpJsDMsIz5jxgjxY4ii7o+k+a5dCjMwlz
axxSwo1G0Nijcykw6wmYSQ5RtXlHpJYomYo8Zwp6J+9IzhYyL/LvB4UHV+1YqqCnTe0rOFRST4kD1aMe
lwp8BoCUZA5GPZohWv+3OC60nY473OSxAjZSgH8/6fzcOY2F9Ngcdbj3tDIpNcLYSVz2qM/Y2cmHyBa/
WnH3/vzy4vpxNhymN6f9i98WsTrun4rPV1fvr/7x9HD/y93t8eVkMb37xBVbLG7T+Os/+/ePo/v+tFjC
7b+WeH1+fP7l9PZ3d5UdC9fv9YI/7oz3xsmx1D1K4+QteXkLHB2USYSsmoNc6iqzH2o1goV9i2UudCdn
CE4yJcDLsZbcaF/5+tC56FyexqWrXSKv8MasXRf13EmLxDu+K8XJUwFuGbIL68rVxNOkGwfVF+xwoSe+
w5UpxEixEimTx2zCFrGSqW8MPjluBMQnnfebJ6/xdFAJT1orWP/5Z363HP7b/PHwNLm5zFwK4vLr8af/
TB4/35+NH06G94PP/TM+nf/1+CsTGgdf/MX041P/Xrj08vrcLdIB65+q34e/3U+u/npcjNQ1b6ngl9Ip
udnMuBuHxtJNjVjWGkLOiBQ96rkD0N9yZinhinnfHNXcbgojQ2n0Nw8KOBq3UuFGFbn2hBsVGQ1KaljT
X9nYkK6EP2yJVaJpgWh0I52iJinqqKxHWoVhHcyiOhaadGUjmQtJciEjnsHMGR0pGGF18PMvdlECIpNu
HIxvBRcLOTso3guCsMCIg0ZwdB2USOqR2ZXNmqEGP5SooAyodEsOVMlXGm+MfRfWB+Gty5QPwNvJcfYm
wLe3Tb2VVbmd89GuLJ+RYpwAFwXXvoWVpCVx62TO3DKAMK4ecymArNtc98LNaARAk+tyRwbVbpX2Dnp+
tP+RMaLx/skY0ea73j6HmWfGeGjyaMLJSp/rwD7P4sXKHRmXR2NnChuslLexrQIVS0FtKFYnNBlUoZGl
KRzhNbLVTy2GVilVspGSHmkrB1t4HMLNGh+BAibEqgCOSV8IwrTBDL6Hu0nGHshMBfTrCiMEMjaRACVn
ZUFWoNHkCyzwrcVQ21pulMNrS6CMMFTAahWlyvC6rzTx4tICJYIhq5Y9mi89qFFLsbS0rMaYlXzadIHm
rLF3I/mUhM3uvvQ/+KifNLkKi3YHTds/9Pbk2N66n18cP5fIs5ewk9oWSALSPAM+Tc0i5OLAAkNKZkwV
sNq+ZGrDdTlGhq5PBg4YAnHAC+dAI7EMEZzenUXbld6s2UPuzmbDeuM9qkAxBdLkxhkOIMhcYkaa4z1X
avt2He0cuJRhQurxnqHr+ettVzV0vWWrJBvD5fxnmd4b3nZgli1z0Nge2HZwkFtc7vu9ro2j9gpaDRMO
hMSIMyeq/elFM0rsHXvspstqyiLZGU1uQk7ElnR6L/W40+l0Y/uyvi/SelC7UcA8kDmTSOYZaFKCpAHJ
XCpFUiDc5FYBgthhdQ2KmhtSP8viC3QeNtft5c4XvMzv/8dd9cr7YbR9Den89AqmHspBoRqLSMY8SaEk
SzEO4h2xgUWfmTnBTHoS4CEMCWZQv6/Lny0xjqCpTwsny27+LISE7Oa65CN8fO7jtV6utBByqxiC3/XS
7YaPLrLZ7Kszuj7ylH09aiyt9xNjy/m96e0fvXXgvaFJs+rGQaJVZcCsLbjU2tAkrLnU+9X+KDs/TarH
AT4qEriDnJVevu/2qg6B0WQIW4LdOGBUfgUHtOPwFdyNqz/d/hsAAP//Tph8XIsTAAA=
`,
	},

	"/static/mobile/app.js": {
		local:   "static/mobile/app.js",
		size:    6863,
		modtime: 1540591535,
		compressed: `
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
/hMAAP//QgrZQM8aAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/mobile": {
		isDir: true,
		local: "static/mobile",
	},
}
