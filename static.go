// Code generated by "esc -o static.go -pkg main static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/desktop/desktop.css": {
		local:   "static/desktop/desktop.css",
		size:    168,
		modtime: 1540597009,
		compressed: `
H4sIAAAAAAAC/3zNsQrCMBCH8f2e4j9auJQmJii+TZKGUKw5OSMO0nd3kK5dvu3HN1YxXePSvgQAKeZ7
VXm32WRZRW/Qmk4uBIa9TIyzH2gjGl89ajdJy2dp9Yhaf2U4ZxkuhL/N8niupZf5cOknxp6Btl8AAAD/
/6g2LrWoAAAA
`,
	},

	"/static/desktop/desktop.html": {
		local:   "static/desktop/desktop.html",
		size:    1164,
		modtime: 1540597009,
		compressed: `
H4sIAAAAAAAC/6xUT2/bPgy991Pop3MTIT/skA2ygSHbuT30sqMiMREb/ZtIu823H2wnTdZ5ATYsB8V8
fOLzIwnr/748bJ6+PX4VnmNo7/T5D4xr74QQQkdgI6w3lYAb2fFusZbXqWQiNLJHeCm5shQ2J4bEjXxB
x75x0KOFxRjcC0zIaMKCrAnQrO5FNK8Yu3gBOoI6RmYboEn5pHU5dMB0EBVCI4mPAcgDsBS+wq6RnrnQ
J6W6VA77pc1RUQHLFZaWSDkkfgMipgE8e/k3VRfwWv6msnVpGQ1DRRMcEO4T2pxo1Pp/uV5+/KAGqTnK
H6g5oAPnck0nW7GwoGrnbD5/76AeJ4fT8yj3TLLVaro6U+cs8zNNq2mp9Da74+mWX7WbvNsB+VzEUzWY
xEN1UEkrvzpxeFgEYYMhauQUjOfC5x7qycf5p/myuddofQ+N1HaSTF3cQtWK/Tzrc63YmyAYI/yetTG1
otnfYDyiPXRF8LHcII3+hQM2GOjGO1nGnObyWr13O7B+6YrmYQ4C3ampcq5pmp2wOVAxqZFr2WqH/XkU
IRuHaT+M2GHfasWundW+zPsNGgSHjZhSWo1fnR8BAAD//08sp8mMBAAA
`,
	},

	"/static/desktop/desktop.js": {
		local:   "static/desktop/desktop.js",
		size:    2798,
		modtime: 1540597009,
		compressed: `
H4sIAAAAAAAC/6RVW2/bNhR+nn7FGReUUq3IcmZvnV0HyJKuSLFLEKfYQxoEjHRkq5FJlaSdGIb++0BK
ji1bSVysL3XIc76LzoWO4xy4EItoNkWuwQsksnjhJjMe6VRw14OlAwCQCRZfMXWvXG9gDxTqc65Rzlm2
G92YUfjQC8PQGziFN3Acx2m3YbRQGqeg0OY7cybh5OL88+WfMARKnRUwjFF/Gv3zt4s8zkXKtR8zzXxz
7S2dH0zaVyX4rYQhmLhAaZnycZosXBNYCYgEVyLDIBNjl1yfffj988f+JyX4ycX5DVzitxkq3Ycv8gsn
0KoAy9R2G9LkiRyGQ6DaWKMeSNQzycFIcZfEnpL+9ZJoyVJO+uTXHvFJxKRM2RhJnxwRnyjNjCtz2w3D
MDzqhMQnEnNk+lbIGCXpJyxT6JMYs3SOcvF0UF1fL0kkkgTxVi9yg/tB5RKVEsQnfDa9MzGd4sYnhnnO
sludTpH0O71u2Put0+l2C//7NP4cvntdo5azFyReIaup8/+Xh2736Hs97PWdX/bQIPFo18gpy/NZlHK+
n5V3Yae4KaouPQhyobRbjkGLtmnrqemrlnwasSAWHNfTJ1Hl3noAX235E64eUK473uYPavlaLqCOaP4Z
HatJy5lU6DakFhAxHU1clFJIrwFlUxuQ6ydZFwYR/mBphvFanIWBLY6XYC4xSnGOMWh81HWTTTCVp6Xl
6dNSRGJF0KJurPaXHXyTvIFZbJTIQKxLBF+/PU6kbzWNNNMz5a+cwfOVq9uye+r172P6qXDWK3RjH5dM
ZmtqdpchDOHApT/Z37RCWC3cas/5y8J/rs9sXjDR08yldEPAQYAsmtjowKKsEe59c7DVq1aPLMW81/KY
7vRiwPIceezagPiYeoH5jq7BCuwe8MzDso0ZaxgCxwc4YxrL4M0pfNspH6W9qGIdaHGVTnFkHxjXC9Ts
Tmnphn7P22F/WfFqWTWLrvaReQdHmCWQp9H94Syntcg0KaFW0V4t72z1WwtYkdF9ja4Qm8TZ5Whf6Dpa
VXErycZsVnzu7a6AEqg1hHlQbskWhUegrXmwsU9bFN7fyeMtrmKPktmetByNNlg5GEMg/7JUk90apEkC
Q9jpmMO/mJ4ESSaEdE1PBVw8uB60oaGTtioEb96UsO+H0Hv7S+jBcq3iozCV0hOE8lEbWFNxfJoxpVw6
Fof2nHrFNsWPz3F0tjlGmkkNdxIfUj4mA6hTKHN7WN028JSwUIc8FdM8Q41xBSdxKubYjFi/3HS0X1uW
rLuDZldQlaLl1hZc/e8U/wUAAP//EnAoaO4KAAA=
`,
	},

	"/static/mobile/app.css": {
		local:   "static/mobile/app.css",
		size:    243,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/0SOwY6DIBCG7zwFidmbEnf3VHwalEEmUYbApGqavntTqPb48eX7GZWnBBBa5dHCQ0gp
pcUcF3PoQAEG8RSiWU2sygPOnvV/38e9KDVy6LYr3dCy17f+Zyi4mjRj6Jii/juLZvJEGbqJnANoT7Sw
4B3SUXeisRbD/K2UI2JIH0sZGSlohzvY+tVIzLTq3xK8HxZwrC9K5e669goAAP//4Kit/PMAAAA=
`,
	},

	"/static/mobile/app.html": {
		local:   "static/mobile/app.html",
		size:    5003,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/8RYW3fbuBF+96/A4tWhGGfttd0j8VQrJ812d+NL1HrtlxwQGImQQAAGhrr01/eQIBVJ
Fi3ZzTl9IgDN9fsGw6G6P11dD4YPNx9JhrlKjrrNA5hIjgghpJsDMsIz5jxgjxY4ii7o+k+a5dCjMwlz
axxSwo1G0Nijcykw6wmYSQ5RtXlHpJYomYo8Zwp6J+9IzhYyL/LvB4UHV+1YqqCnTe0rOFRST4kD1aMe
lwp8BoCUZA5GPZohWv+3OC60nY473OSxAjZSgH8/6fzcOY2F9Ngcdbj3tDIpNcLYSVz2qM/Y2cmHyBa/
WnH3/vzy4vpxNhymN6f9i98WsTrun4rPV1fvr/7x9HD/y93t8eVkMb37xBVbLG7T+Os/+/ePo/v+tFjC
7b+WeH1+fP7l9PZ3d5UdC9fv9YI/7oz3xsmx1D1K4+QteXkLHB2USYSsmoNc6iqzH2o1goV9i2UudCdn
CE4yJcDLsZbcaF/5+tC56FyexqWrXSKv8MasXRf13EmLxDu+K8XJUwFuGbIL68rVxNOkGwfVF+xwoSe+
w5UpxEixEimTx2zCFrGSqW8MPjluBMQnnfebJ6/xdFAJT1orWP/5Z363HP7b/PHwNLm5zFwK4vLr8af/
TB4/35+NH06G94PP/TM+nf/1+CsTGgdf/MX041P/Xrj08vrcLdIB65+q34e/3U+u/npcjNQ1b6ngl9Ip
udnMuBuHxtJNjVjWGkLOiBQ96rkD0N9yZinhinnfHNXcbgojQ2n0Nw8KOBq3UuFGFbn2hBsVGQ1KaljT
X9nYkK6EP2yJVaJpgWh0I52iJinqqKxHWoVhHcyiOhaadGUjmQtJciEjnsHMGR0pGGF18PMvdlECIpNu
HIxvBRcLOTso3guCsMCIg0ZwdB2USOqR2ZXNmqEGP5SooAyodEsOVMlXGm+MfRfWB+Gty5QPwNvJcfYm
wLe3Tb2VVbmd89GuLJ+RYpwAFwXXvoWVpCVx62TO3DKAMK4ecymArNtc98LNaARAk+tyRwbVbpX2Dnp+
tP+RMaLx/skY0ea73j6HmWfGeGjyaMLJSp/rwD7P4sXKHRmXR2NnChuslLexrQIVS0FtKFYnNBlUoZGl
KRzhNbLVTy2GVilVspGSHmkrB1t4HMLNGh+BAibEqgCOSV8IwrTBDL6Hu0nGHshMBfTrCiMEMjaRACVn
ZUFWoNHkCyzwrcVQ21pulMNrS6CMMFTAahWlyvC6rzTx4tICJYIhq5Y9mi89qFFLsbS0rMaYlXzadIHm
rLF3I/mUhM3uvvQ/+KifNLkKi3YHTds/9Pbk2N66n18cP5fIs5ewk9oWSALSPAM+Tc0i5OLAAkNKZkwV
sNq+ZGrDdTlGhq5PBg4YAnHAC+dAI7EMEZzenUXbld6s2UPuzmbDeuM9qkAxBdLkxhkOIMhcYkaa4z1X
avt2He0cuJRhQurxnqHr+ettVzV0vWWrJBvD5fxnmd4b3nZgli1z0Nge2HZwkFtc7vu9ro2j9gpaDRMO
hMSIMyeq/elFM0rsHXvspstqyiLZGU1uQk7ElnR6L/W40+l0Y/uyvi/SelC7UcA8kDmTSOYZaFKCpAHJ
XCpFUiDc5FYBgthhdQ2KmhtSP8viC3QeNtft5c4XvMzv/8dd9cr7YbR9Den89AqmHspBoRqLSMY8SaEk
SzEO4h2xgUWfmTnBTHoS4CEMCWZQv6/Lny0xjqCpTwsny27+LISE7Oa65CN8fO7jtV6utBByqxiC3/XS
7YaPLrLZ7Kszuj7ylH09aiyt9xNjy/m96e0fvXXgvaFJs+rGQaJVZcCsLbjU2tAkrLnU+9X+KDs/TarH
AT4qEriDnJVevu/2qg6B0WQIW4LdOGBUfgUHtOPwFdyNqz/d/hsAAP//Tph8XIsTAAA=
`,
	},

	"/static/mobile/app.js": {
		local:   "static/mobile/app.js",
		size:    6864,
		modtime: 1540593497,
		compressed: `
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
/wkAAP//FjTOLNAaAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/desktop": {
		isDir: true,
		local: "static/desktop",
	},

	"/static/mobile": {
		isDir: true,
		local: "static/mobile",
	},
}
