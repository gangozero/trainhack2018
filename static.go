// Code generated by "esc -o static.go -pkg main static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/mobile/app.css": {
		local:   "static/mobile/app.css",
		size:    243,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/0SOwY6DIBCG7zwFidmbEnf3VHwalEEmUYbApGqavntTqPb48eX7GZWnBBBa5dHCQ0gp
pcUcF3PoQAEG8RSiWU2sygPOnvV/38e9KDVy6LYr3dCy17f+Zyi4mjRj6Jii/juLZvJEGbqJnANoT7Sw
4B3SUXeisRbD/K2UI2JIH0sZGSlohzvY+tVIzLTq3xK8HxZwrC9K5e669goAAP//4Kit/PMAAAA=
`,
	},

	"/static/mobile/app.html": {
		local:   "static/mobile/app.html",
		size:    5003,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/8RYW3fbuBF+96/A4tWhGGfttd0j8VQrJ812d+NL1HrtlxwQGImQQAAGhrr01/eQIBVJ
Fi3ZzTl9IgDN9fsGw6G6P11dD4YPNx9JhrlKjrrNA5hIjgghpJsDMsIz5jxgjxY4ii7o+k+a5dCjMwlz
axxSwo1G0Nijcykw6wmYSQ5RtXlHpJYomYo8Zwp6J+9IzhYyL/LvB4UHV+1YqqCnTe0rOFRST4kD1aMe
lwp8BoCUZA5GPZohWv+3OC60nY473OSxAjZSgH8/6fzcOY2F9Ngcdbj3tDIpNcLYSVz2qM/Y2cmHyBa/
WnH3/vzy4vpxNhymN6f9i98WsTrun4rPV1fvr/7x9HD/y93t8eVkMb37xBVbLG7T+Os/+/ePo/v+tFjC
7b+WeH1+fP7l9PZ3d5UdC9fv9YI/7oz3xsmx1D1K4+QteXkLHB2USYSsmoNc6iqzH2o1goV9i2UudCdn
CE4yJcDLsZbcaF/5+tC56FyexqWrXSKv8MasXRf13EmLxDu+K8XJUwFuGbIL68rVxNOkGwfVF+xwoSe+
w5UpxEixEimTx2zCFrGSqW8MPjluBMQnnfebJ6/xdFAJT1orWP/5Z363HP7b/PHwNLm5zFwK4vLr8af/
TB4/35+NH06G94PP/TM+nf/1+CsTGgdf/MX041P/Xrj08vrcLdIB65+q34e/3U+u/npcjNQ1b6ngl9Ip
udnMuBuHxtJNjVjWGkLOiBQ96rkD0N9yZinhinnfHNXcbgojQ2n0Nw8KOBq3UuFGFbn2hBsVGQ1KaljT
X9nYkK6EP2yJVaJpgWh0I52iJinqqKxHWoVhHcyiOhaadGUjmQtJciEjnsHMGR0pGGF18PMvdlECIpNu
HIxvBRcLOTso3guCsMCIg0ZwdB2USOqR2ZXNmqEGP5SooAyodEsOVMlXGm+MfRfWB+Gty5QPwNvJcfYm
wLe3Tb2VVbmd89GuLJ+RYpwAFwXXvoWVpCVx62TO3DKAMK4ecymArNtc98LNaARAk+tyRwbVbpX2Dnp+
tP+RMaLx/skY0ea73j6HmWfGeGjyaMLJSp/rwD7P4sXKHRmXR2NnChuslLexrQIVS0FtKFYnNBlUoZGl
KRzhNbLVTy2GVilVspGSHmkrB1t4HMLNGh+BAibEqgCOSV8IwrTBDL6Hu0nGHshMBfTrCiMEMjaRACVn
ZUFWoNHkCyzwrcVQ21pulMNrS6CMMFTAahWlyvC6rzTx4tICJYIhq5Y9mi89qFFLsbS0rMaYlXzadIHm
rLF3I/mUhM3uvvQ/+KifNLkKi3YHTds/9Pbk2N66n18cP5fIs5ewk9oWSALSPAM+Tc0i5OLAAkNKZkwV
sNq+ZGrDdTlGhq5PBg4YAnHAC+dAI7EMEZzenUXbld6s2UPuzmbDeuM9qkAxBdLkxhkOIMhcYkaa4z1X
avt2He0cuJRhQurxnqHr+ettVzV0vWWrJBvD5fxnmd4b3nZgli1z0Nge2HZwkFtc7vu9ro2j9gpaDRMO
hMSIMyeq/elFM0rsHXvspstqyiLZGU1uQk7ElnR6L/W40+l0Y/uyvi/SelC7UcA8kDmTSOYZaFKCpAHJ
XCpFUiDc5FYBgthhdQ2KmhtSP8viC3QeNtft5c4XvMzv/8dd9cr7YbR9Den89AqmHspBoRqLSMY8SaEk
SzEO4h2xgUWfmTnBTHoS4CEMCWZQv6/Lny0xjqCpTwsny27+LISE7Oa65CN8fO7jtV6utBByqxiC3/XS
7YaPLrLZ7Kszuj7ylH09aiyt9xNjy/m96e0fvXXgvaFJs+rGQaJVZcCsLbjU2tAkrLnU+9X+KDs/TarH
AT4qEriDnJVevu/2qg6B0WQIW4LdOGBUfgUHtOPwFdyNqz/d/hsAAP//Tph8XIsTAAA=
`,
	},

	"/static/mobile/app.js": {
		local:   "static/mobile/app.js",
		size:    6150,
		modtime: 1540587241,
		compressed: `
H4sIAAAAAAAC/6xY63PbuBH/HP0VW12mACuKkm/m2jk5ykwuaW9y41wyefRDfR4PTC4lnEmAAUDbOlX/
ewcASYGyHk5bfbBJ7OuHxWIfHAwGzylkMq1LFAaiRCHLVjSvRWq4FDSC9WAAAKCX8v5TqhAFJYVkGRcL
Ep07kn19xyoanQ820flgMJnAp5U2WIJGp2VwxxS8+vD2y8cLmAMhg1Y9LND88un9rxRFVkkuTJwxw2JL
jtaDZ1bsdy3FtYI5WL5EG8XFgucrahkb+6kUWhaYFHJBh5dv/v7Tl59nv2gpXn14ewUf8WuN2szgN/Wb
GMKoUWhxWtnnSSW1oR7ciEzIqIPSMDo2+0syKXDrGYW6itYd9SSQV0Lfo9ricPLnPXmjVtDXaH8WR7v/
iimNdI/oBlJm0iVFpaSK9mgJscHwsoP1wWqEfzBeYLYF59TAjo1jaj5iyvEOMzD4YPqb3Kem2dPa2ZkR
DyJ3IMimv7Hem/U+tcKBzk1wRFbF9ojg968PSxU7TJ8MM7WO253B4ZPrb8tFz2n/2MDfDAbbyA7uC8+a
OHlOh4l2a8MoWfIM6bRR8ZyS7zzlmox4FiU5y/CtoD9Mp15xeGO+aFQXMmWGuxvqdfMc6HCBsnAEKYbA
BQh2xxfMSBWtYTJJl5jeQsAD7I7xgt0UCN1GJhMbhUZaQ1BrVJDWStnc0EnVmouFpb/2lA9S8yZZlGiW
MuuUdfaTwGqyR7I7sqpZidbwKGjMEt+xKtFo/snxnl62vEkqpcp0UjDDTZ1h/IggxcJRruKzH6J+eDUH
sMFC4zYmejf5JyXvrSMyiVoQA7quKqlM6Mk/DYNYUGhqJeByGk+vvPLdE/ysGBdv37RnN5nAPS8KuEFI
ZYat9x0XvH0DuZIl3CBLpbCnapYIKVOKswUOAoPDv/0w3LX0uuE7YapVB6Iub1B5i9bOE6x+74y6rG+Y
MsCqqkv8WyxdkfA4bGovWQVz4IKbpnpYwgLNBdfmfW4vLJdCb2Oj4NpETTnyuRtZunTLiW644477Nnbc
4WF7o+oWbT25SPwjvdTGhqcNnxjaZymuooRl2WdJS1btXPRBqJDDHKZbukbTILeCcR8cDxTZK18pvBs3
VBIlacHT26D29tHznHJ4CdMI+HjcT6lPNtpDbxEIfDDfhuAF9D2eFCgWZjk+iyLgo9H/C5hUGapxKvMc
8SSwrcBNbYwUmvgM+r42B2VauXQppcatpSbz7ilalptl2VNBhUGi5D3MvTknPDarCscGy6pgxquyzYUL
udcF05qSgJHsAdPB92zWsyRKWFWhyKiS93tENi3iA3tbyHGGBb+zfndOefIWD/nxlP/3yDcIVr2TOCq4
kGNX2WRtngy4/dms9LoRpge8/Cg894BIWsdVPL1F9c04eE6fU7PkOkqWTDcRcGPEuFK8ZNYbUZNvz4/q
2QtFYSnvcJ/S48ps4FbM1X4bux6eX6AnRHlOPWNi+3RKfBTDfA6kXGkscnLCIfb3WENMms2dgt7GRuuL
Tiy4YH1PwFF9O+3BtyBu9/ttgFup/xbvkUg+nATChujY2uZQ4g6HxJJV7aY7nskE9jSw/QZ3T8mIRV0G
fYO28WjXL0VdXg3aBrotLNeGm8JmINv2U/IrPhhoSDMgI20Sx7DtvAPBcivHBRAYwTtmlomStciokyxx
8tdpBCMgUHKRkEBNWIFIlFRKVpRkXNsGOyMxGFVj2O97q2MuckmiJmi6xYzE2iR2FOgT/ObibhePyGVL
LUNjYacR71b9Y0h5bvfN9bVP7PYKn0X7KvSukpwVGqO+jlzK7JEGu3hcfssrpOH56jB3a07UpW+V9nRZ
+0XPQ9G2xwlamz3N0iFFHkUZjipBixl0mHYa2Rkbu264+fxRsuq1bBIw+a65U57kx6Gmk61ow5kwYxQl
PCNRDGv7wm9qq9oSlSxm4GDaK/nsIkn9YhLw0XWlMOcPM0I2Lv28Cmjkz6msVufwMxML+QcqCf+GZukF
g6XCfD5cGlPNJpP7+/tEVii0UYjGekOqxcTyKr5YmuHL9xWKT474jlUvJuwlaTtuv7PoHMC78iIxvMAL
tkJFiVWvZ5PJWm/c8h4j6z82k/XDZrJebZJKLEgM68GzZyV7+JeU5QzOfhw82+zaGuybMO0EF8PZjw25
mXg816OxfGdsSVlR3LD0Nkhcxg10894EeN5Ruxls3h/curnIfSkjrtOL107XzP2NW8lZ+7CJD32malH5
9SY793bSb4nWpz7+/a/78gnd51+eNXF+KjUGsgorZO398C8kSrimZOa6QuxxN+UV5v4WdJc+LL2+V3nc
uHQ9RKtl7vLkVrlLUTCH9aYrCb0m3o+r+1pCN0caLIM+644VYYm2o5dl4MKb6X/FcEuXluEK5uHb6Gyr
wrYwR6TOmhq9CY/OwbcRB3O4vBoEU7cT3oaZ3WHsPx6E0dbJJ1Wtl3TtF64t9ywQmfl/my4gexHvTJ0K
+bgt8dtgin04XDv5mX+J2/li1jzEKbOQ9FJW1zybncWee4v88F0Kb0XFViUKE7Z5Gs1nXqI8MgPZsPuq
UpnZ6PAPdOgAWCzDkWs+8kJKRX0fwkQmSxrBX+Bs6rqQM9j9vBqi0nWaotYhqk0M30+n064zc+XnPwEA
AP//N0b/ZwYYAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/mobile": {
		isDir: true,
		local: "static/mobile",
	},
}
