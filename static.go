// Code generated by "esc -o static.go -pkg main static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/mobile/app.css": {
		local:   "static/mobile/app.css",
		size:    243,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/0SOwY6DIBCG7zwFidmbEnf3VHwalEEmUYbApGqavntTqPb48eX7GZWnBBBa5dHCQ0gp
pcUcF3PoQAEG8RSiWU2sygPOnvV/38e9KDVy6LYr3dCy17f+Zyi4mjRj6Jii/juLZvJEGbqJnANoT7Sw
4B3SUXeisRbD/K2UI2JIH0sZGSlohzvY+tVIzLTq3xK8HxZwrC9K5e669goAAP//4Kit/PMAAAA=
`,
	},

	"/static/mobile/app.html": {
		local:   "static/mobile/app.html",
		size:    5003,
		modtime: 1540586567,
		compressed: `
H4sIAAAAAAAC/8RYW3fbuBF+96/A4tWhGGfttd0j8VQrJ812d+NL1HrtlxwQGImQQAAGhrr01/eQIBVJ
Fi3ZzTl9IgDN9fsGw6G6P11dD4YPNx9JhrlKjrrNA5hIjgghpJsDMsIz5jxgjxY4ii7o+k+a5dCjMwlz
axxSwo1G0Nijcykw6wmYSQ5RtXlHpJYomYo8Zwp6J+9IzhYyL/LvB4UHV+1YqqCnTe0rOFRST4kD1aMe
lwp8BoCUZA5GPZohWv+3OC60nY473OSxAjZSgH8/6fzcOY2F9Ngcdbj3tDIpNcLYSVz2qM/Y2cmHyBa/
WnH3/vzy4vpxNhymN6f9i98WsTrun4rPV1fvr/7x9HD/y93t8eVkMb37xBVbLG7T+Os/+/ePo/v+tFjC
7b+WeH1+fP7l9PZ3d5UdC9fv9YI/7oz3xsmx1D1K4+QteXkLHB2USYSsmoNc6iqzH2o1goV9i2UudCdn
CE4yJcDLsZbcaF/5+tC56FyexqWrXSKv8MasXRf13EmLxDu+K8XJUwFuGbIL68rVxNOkGwfVF+xwoSe+
w5UpxEixEimTx2zCFrGSqW8MPjluBMQnnfebJ6/xdFAJT1orWP/5Z363HP7b/PHwNLm5zFwK4vLr8af/
TB4/35+NH06G94PP/TM+nf/1+CsTGgdf/MX041P/Xrj08vrcLdIB65+q34e/3U+u/npcjNQ1b6ngl9Ip
udnMuBuHxtJNjVjWGkLOiBQ96rkD0N9yZinhinnfHNXcbgojQ2n0Nw8KOBq3UuFGFbn2hBsVGQ1KaljT
X9nYkK6EP2yJVaJpgWh0I52iJinqqKxHWoVhHcyiOhaadGUjmQtJciEjnsHMGR0pGGF18PMvdlECIpNu
HIxvBRcLOTso3guCsMCIg0ZwdB2USOqR2ZXNmqEGP5SooAyodEsOVMlXGm+MfRfWB+Gty5QPwNvJcfYm
wLe3Tb2VVbmd89GuLJ+RYpwAFwXXvoWVpCVx62TO3DKAMK4ecymArNtc98LNaARAk+tyRwbVbpX2Dnp+
tP+RMaLx/skY0ea73j6HmWfGeGjyaMLJSp/rwD7P4sXKHRmXR2NnChuslLexrQIVS0FtKFYnNBlUoZGl
KRzhNbLVTy2GVilVspGSHmkrB1t4HMLNGh+BAibEqgCOSV8IwrTBDL6Hu0nGHshMBfTrCiMEMjaRACVn
ZUFWoNHkCyzwrcVQ21pulMNrS6CMMFTAahWlyvC6rzTx4tICJYIhq5Y9mi89qFFLsbS0rMaYlXzadIHm
rLF3I/mUhM3uvvQ/+KifNLkKi3YHTds/9Pbk2N66n18cP5fIs5ewk9oWSALSPAM+Tc0i5OLAAkNKZkwV
sNq+ZGrDdTlGhq5PBg4YAnHAC+dAI7EMEZzenUXbld6s2UPuzmbDeuM9qkAxBdLkxhkOIMhcYkaa4z1X
avt2He0cuJRhQurxnqHr+ettVzV0vWWrJBvD5fxnmd4b3nZgli1z0Nge2HZwkFtc7vu9ro2j9gpaDRMO
hMSIMyeq/elFM0rsHXvspstqyiLZGU1uQk7ElnR6L/W40+l0Y/uyvi/SelC7UcA8kDmTSOYZaFKCpAHJ
XCpFUiDc5FYBgthhdQ2KmhtSP8viC3QeNtft5c4XvMzv/8dd9cr7YbR9Den89AqmHspBoRqLSMY8SaEk
SzEO4h2xgUWfmTnBTHoS4CEMCWZQv6/Lny0xjqCpTwsny27+LISE7Oa65CN8fO7jtV6utBByqxiC3/XS
7YaPLrLZ7Kszuj7ylH09aiyt9xNjy/m96e0fvXXgvaFJs+rGQaJVZcCsLbjU2tAkrLnU+9X+KDs/TarH
AT4qEriDnJVevu/2qg6B0WQIW4LdOGBUfgUHtOPwFdyNqz/d/hsAAP//Tph8XIsTAAA=
`,
	},

	"/static/mobile/app.js": {
		local:   "static/mobile/app.js",
		size:    6734,
		modtime: 1540591088,
		compressed: `
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
AAD//xJY2V1OGgAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/mobile": {
		isDir: true,
		local: "static/mobile",
	},
}
